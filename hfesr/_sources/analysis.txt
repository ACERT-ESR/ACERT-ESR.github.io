========
Analysis
========

-------------
Phase Cycling
-------------
Note that it makes the most sense to phase cycle the pulses in the correct order.  The :function:`simple_sequence <Experiments.Experiment.simple_sequence>` method should be used to eaily construct pulse sequences with standard phase cycling.

Previously, the following module was used to control phase cycling.
However, it is now **obsolete**.

.. automodule:: PhaseCycling
   :members:

--------
Plotting
--------

Creating fancy plots of experimental data is highly specific to the intended
purpose and therefore left to the user. A powerful plotting package is
`Gnuplot <http://www.gnuplot.info>`_, which can be used from within Python by
importing the `Gnuplot` module. This allows automated generation of
highly customized data plots without the interruption in workflow caused by
having to switch to another program. For further details, the user is advised
to consult the `Gnuplot` documentation.
For quick and dirty plots, e.g. to judge the outcome of an experiment, some
basic plotting functions, based on the `Gnuplot` module, are provided
in the :mod:`plot` module.

Each experiment has its own plotting routines. First, you have to plot to
the screen. Then you can save the plot::

    95 GHz: echo.run()
    95 GHz: plots=echo.plot()     # This returns an array of plots.
    95 GHz: plots[0].print_one() # Print the first one.

If there are parameters for a particular plotting routine, you can
specify them in `plot()`::

    95 GHz: plots=cw.plot(offset=1,phase=90,quadrature=False)

To save a plot, specify a filename argument to print_plot::

    95 GHz: plots[0].print_one('plot51.ps')

The plotting routine for each experiment is in the `plot` module.
You could call that routine directly. It returns a Gnuplot object
which has a `hardcopy` method::

    95 GHz: g=plot.plotfid(fid)
    95 GHz: g.hardcopy("plot.ps", color=1, solid=1)
    95 GHz: g.hardcopy("|lpr -Pprinter", color=1, solid=1)
    95 GHz:

where `g` is a reference to a `Gnuplot` object created by one
of the functions described below.

Another way to save images is the makeps function.

.. autofunction:: plot.makeps


Oscilloscope
^^^^^^^^^^^^^^^^^^^^^^

.. autofunction:: plot.save_oscope

1D Data Arrays
^^^^^^^^^^^^^^

.. autofunction:: plot.cplot

Field-Swept CW ESR Spectrum
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. function:: plot.plotcwdata(cw, offset=None, phase=0, quadrature=1):

    '''
    This function creates plots of
    field-swept cw ESR experiments (as defined by the :mod:`Experiments`
    module)::

        95 GHz: g=plot.plotcwdata(cw)
        95 GHz: h=plot.plotcwdata(cw, offset=0, phase=45)
        95 GHz:

    The plot displays both components (real and imaginary part)
    of the spectrum (averaged over all sweeps).  An optional (complex) offset value
    may be subtracted from the spectrum data; by default, the arithmetic mean of
    the spectral data will be subtracted.  Additionally, a phase correction
    :math:`\phi`
    (in degrees) may be specified (this will multiply the data by a factor
    of\ :math:`\exp\left(i \pi \phi/180^\circ\right)`\ before
    plotting). A textual
    description of the various parameters is generated over the plot
    proper.\footnote{When the plot is saved in encapsulated postscript format, this
    description will be outside of the bounding box, and may thus not be visible.
    When printed as a plain postscript file, the description will be visible.}

    .. figure:: manual/pics/plotcwdata.*
       
       Output generated by the \computer{plotcwdata} function.

FID Spectrum
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. autofunction:: plot.plotfid

SECSY Spectrum
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. autofunction:: plot.plotsecsy


COSY Spectrum
^^^^^^^^^^^^^^^^^^

.. autofunction:: plot.plotcosy

2D-ELDOR/EXCSY Spectrum
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. autofunction:: plot.ploteldor

.. figure: manual/pics/ELDORplot.*

   Typical lot of a 2D-ELDOR/EXCSY :math:`S_{c-}` spectrum.

Continuous Wave Spectra
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. autofunction:: io_doc.cw2asc


2D-ELDOR/EXCSY Spectra
^^^^^^^^^^^^^^^^^^^^^^^^^

.. autofunction:: io_doc.eldor2spc


----------------
Exporting Data
----------------

Results of experiments are all stored in the same directory,
specified by Spectrometer.results. Each filename has the format
YYYY-MM-DD_experiment_username_label.dat. A text formatted version
of some experiments is stored with the same name but an ending of .txt.
The text files are tab-delimited, 3-column.

At the end of each experiment run, the prompt will ask whether to 
save the data::

  Would you like to save your data? (y/n)y
  What label would you like in the filename (no space, enter for none) ? tmp
  Your raw data was saved as /results/fid/2010-03-12_1437_FID_acert_tmp.dat
  Would you like to erase the results from memory (this will save memory)? (Y/N)n

The software stores all data objects in files according to the established
Python :mod:pickle: and :mod:`Numeric.pickle` standards[#f1]_.
This makes it straightforward to access
and manipulate data files from other Python programs.

To export data in ASCII (text) format, short python scripts can be written.
Predefined ad-hoc functions are provided for the case of continuous wave
spectra and 2D-ELDOR/EXCSY spectra. For other experiments, such routines are
left as an exercise to the reader, as there appears to be a lack of a suitable
standard file format specification to adhere to.

Writing Data to a File
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. autofunction:: io_doc.save

.. autofunction:: io_doc.saveexp

.. autofunction:: io_doc.save_experiment

.. autofunction:: io_doc.save_simple

.. autofunction:: io_doc.save_matlab


.. [#f1] For details, refer to the Python and Numeric Python
   documentation available at `Python.org <http://www.python.org>`_.
